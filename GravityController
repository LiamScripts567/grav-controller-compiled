--[[

This is a class that provides custom physics that allows things like walking upside down or on planets, etc
 
This is where the scripts should be placed
- GravityController (ReplicatedStorage)
- Animate (StarterCharacterScripts)
- PlayerScriptsLoaded (StaterPlayerScripts)
 
API:
 
Constructors:
GravityController.new(Player player)
> Creates a GravityController object for the given player.
 
Methods:
GravityController:Destroy()
> Destroys the GravityController object. This returns the player back to the standard character controller.
GravityController:GetGravityUp(Vector3 oldGravity)
> This method should be set by the developer and should return the gravity up vector that the developer would like 
to be applied to the player's character

Properties:
GravityController.GravityUp
> The current gravity up vector that is being applied to the player

 
Enjoy!
- EgoMoose
 
--]]

function require(v)
	return game:HttpGet("https://raw.githubusercontent.com/LiamScripts567/grav-controller-compiled/main/" .. v)
end

local ZERO = Vector3.new(0, 0, 0)
local UNIT_X = Vector3.new(1, 0, 0)
local UNIT_Y = Vector3.new(0, 1, 0)
local UNIT_Z = Vector3.new(0, 0, 1)
local VEC_XY = Vector3.new(1, 0, 1)
 
local IDENTITYCF = CFrame.new()
 
local JUMPMODIFIER = 1.2
local TRANSITION = 0.15
local WALKF = 200 / 3
 
local UIS = game:GetService("UserInputService")
local RUNSERVICE = game:GetService("RunService")
 
local InitObjects = require("InitObjects")
local AnimationHandler = require("AnimationHandler")
local StateTracker = require("StateTracker")
 
-- Class
 
local GravityController = {}
GravityController.__index = GravityController
 
-- Private Functions
 
local function getRotationBetween(u, v, axis)
    local dot, uxv = u:Dot(v), u:Cross(v)
    if (dot < -0.99999) then return CFrame.fromAxisAngle(axis, math.pi) end
    return CFrame.new(0, 0, 0, uxv.x, uxv.y, uxv.z, 1 + dot)
end
 
local function lookAt(pos, forward, up)
    local r = forward:Cross(up)
    local u = r:Cross(forward)
    return CFrame.fromMatrix(pos, r.Unit, u.Unit)
end
 
local function getMass(array)
    local mass = 0
    for _, part in next, array do
        if (part:IsA("BasePart")) then
            mass = mass + part:GetMass()
        end
    end
    return mass
end
 
-- Public Constructor
 
function GravityController.new(player)
    local self = setmetatable({}, GravityController)
 
    -- Camera
    local loaded = player.PlayerScripts:WaitForChild("PlayerScriptsLoader"):WaitForChild("Loaded")
    if (not loaded.Value) then
        loaded.Changed:Wait()
    end
    
    local playerModule = require(player.PlayerScripts:WaitForChild("PlayerModule"))
    self.Controls = playerModule:GetControls()
    self.Camera = playerModule:GetCameras()
    
    -- Player and character
    self.Player = player
    self.Character = player.Character
    self.Humanoid = player.Character:WaitForChild("Humanoid")
    self.HRP = player.Character:WaitForChild("HumanoidRootPart")
    
    -- Animation
    self.AnimationHandler = AnimationHandler.new(self.Humanoid, self.Character:WaitForChild("Animate"))
    self.AnimationHandler:EnableDefault(false)
    
    local soundState = player.PlayerScripts:WaitForChild("RbxCharacterSounds"):WaitForChild("SetState")
    
    self.StateTracker = StateTracker.new(self.Humanoid, soundState)
    self.StateTracker.Changed:Connect(function(name, speed)
        self.AnimationHandler:Run(name, speed)
    end)
    
    -- Collider and forces
    local collider, gyro, vForce, floor = InitObjects(self)
    
    floor.Touched:Connect(function() end)
        collider.Touched:Connect(function() end)
            
            self.Collider = collider
            self.VForce = vForce
            self.Gyro = gyro
            self.Floor = floor
            
            -- Attachment to parts
            self.LastPart = workspace.Terrain
            self.LastPartCFrame = IDENTITYCF
            
            -- Gravity properties
            self.GravityUp = UNIT_Y
            self.Ignores = {self.Character}
            
            function self.Camera.GetUpVector(this, oldUpVector)
                return self.GravityUp
            end
            
            -- Events etc
            self.Humanoid.PlatformStand = true
            
            self.CharacterMass = getMass(self.Character:GetDescendants())
            self.Character.AncestryChanged:Connect(function() self.CharacterMass = getMass(self.Character:GetDescendants()) end)
                
                self.JumpCon = RUNSERVICE.RenderStepped:Connect(function(dt) 
                    if (self.Controls:IsJumping()) then
                        self:OnJumpRequest()
                    end
                end)
                
                self.DeathCon = self.Humanoid.Died:Connect(function() self:Destroy() end)
                    self.SeatCon = self.Humanoid.Seated:Connect(function(active) if (active) then self:Destroy() end end)
                        self.HeartCon = RUNSERVICE.Heartbeat:Connect(function(dt) self:OnHeartbeatStep(dt) end)
                            RUNSERVICE:BindToRenderStep("GravityStep", Enum.RenderPriority.Input.Value + 1, function(dt) self:OnGravityStep(dt) end)
                                
                                
                                return self
                            end
 
                            -- Public Methods
 
                            function GravityController:Destroy()
                                self.JumpCon:Disconnect()
                                self.DeathCon:Disconnect()
                                self.SeatCon:Disconnect()
                                self.HeartCon:Disconnect()
                                
                                RUNSERVICE:UnbindFromRenderStep("GravityStep")
                                
                                self.Collider:Destroy()
                                self.VForce:Destroy()
                                self.Gyro:Destroy()
                                self.StateTracker:Destroy()
                                
                                self.Humanoid.PlatformStand = false
                                self.AnimationHandler:EnableDefault(true)
                                
                                self.GravityUp = UNIT_Y
                            end
 
                            function GravityController:GetGravityUp(oldGravity)
                                return oldGravity
                            end
 
                            function GravityController:IsGrounded(isJumpCheck)
                                if (not isJumpCheck) then
                                    local parts = self.Floor:GetTouchingParts()
                                    for _, part in next, parts do
                                        if (not part:IsDescendantOf(self.Character)) then
                                            return true
                                        end
                                    end
                                else
                                    if (self.StateTracker.Jumped) then
                                        return false
                                    end
                                    
                                    -- 1. check we are touching something with the collider
                                    local valid = {}
                                    local parts = self.Collider:GetTouchingParts()
                                    for _, part in next, parts do
                                        if (not part:IsDescendantOf(self.Character)) then
                                            table.insert(valid, part)
                                        end
                                    end
                                    
                                    if (#valid > 0) then
                                        -- 2. do a decently long downwards raycast
                                        local max = math.cos(self.Humanoid.MaxSlopeAngle)
                                        local ray = Ray.new(self.Collider.Position, -10 * self.GravityUp)
                                        local hit, pos, normal = workspace:FindPartOnRayWithWhitelist(ray, valid, true)
                                        
                                        -- 3. use slope to decide on jump
                                        if (hit and max <= self.GravityUp:Dot(normal)) then
                                            return true
                                        end
                                    end
                                end
                                return false
                            end
 
                            function GravityController:OnJumpRequest()
                                if (not self.StateTracker.Jumped and self:IsGrounded(true)) then
                                    local hrpVel = self.HRP.Velocity
                                    self.HRP.Velocity = hrpVel + self.GravityUp*self.Humanoid.JumpPower*JUMPMODIFIER
                                    self.StateTracker:RequestedJump()
                                end
                            end
 
                            function GravityController:GetMoveVector()
                                return self.Controls:GetMoveVector()
                            end
 
                            function GravityController:OnHeartbeatStep(dt)
                                local ray = Ray.new(self.Collider.Position, -1.1*self.GravityUp)
                                local hit, pos, normal = workspace:FindPartOnRayWithIgnoreList(ray, self.Ignores)
                                local lastPart = self.LastPart
                                
                                if (hit and lastPart and lastPart == hit) then
                                    local offset = self.LastPartCFrame:ToObjectSpace(self.HRP.CFrame)
                                    self.HRP.CFrame = hit.CFrame:ToWorldSpace(offset)
                                end
                                
                                self.LastPart = hit
                                self.LastPartCFrame = hit and hit.CFrame
                            end
 
                            function GravityController:OnGravityStep(dt)
                                -- update gravity up vector
                                local oldGravity = self.GravityUp
                                local newGravity = self:GetGravityUp(oldGravity)
                                
                                local rotation = getRotationBetween(oldGravity, newGravity, workspace.CurrentCamera.CFrame.RightVector)
                                rotation = IDENTITYCF:Lerp(rotation, TRANSITION)
                                
                                self.GravityUp = rotation * oldGravity
                                
                                -- get world move vector
                                local camCF = workspace.CurrentCamera.CFrame
                                local fDot = camCF.LookVector:Dot(newGravity)
                                local cForward = math.abs(fDot) > 0.5 and -math.sign(fDot)*camCF.UpVector or camCF.LookVector
                                
                                local left = cForward:Cross(-newGravity).Unit
                                local forward = -left:Cross(newGravity).Unit
                                
                                local move = self:GetMoveVector()
                                local worldMove = forward*move.z - left*move.x
                                worldMove = worldMove:Dot(worldMove) > 1 and worldMove.Unit or worldMove
                                
                                local isInputMoving = worldMove:Dot(worldMove) > 0
                                
                                -- get the desired character cframe
                                local hrpCFLook = self.HRP.CFrame.LookVector
                                local charF = hrpCFLook:Dot(forward)*forward + hrpCFLook:Dot(left)*left
                                local charR = charF:Cross(newGravity).Unit
                                local newCharCF = CFrame.fromMatrix(ZERO, charR, newGravity, -charF)
                                
                                local newCharRotation = IDENTITYCF
                                if (isInputMoving) then
                                    newCharRotation = IDENTITYCF:Lerp(getRotationBetween(charF, worldMove, newGravity), 0.7)    
                                end
                                
                                -- calculate forces
                                local g = workspace.Gravity
                                local gForce = g * self.CharacterMass * (UNIT_Y - newGravity)
                                
                                local cVelocity = self.HRP.Velocity
                                local tVelocity = self.Humanoid.WalkSpeed * worldMove
                                local gVelocity = cVelocity:Dot(newGravity)*newGravity
                                local hVelocity = cVelocity - gVelocity
                                
                                if (hVelocity:Dot(hVelocity) < 1) then
                                    hVelocity = ZERO
                                end
                                
                                local dVelocity = tVelocity - hVelocity
                                local walkForceM = math.min(10000, WALKF * self.CharacterMass * dVelocity.Magnitude / (dt*60))
                                local walkForce = walkForceM > 0 and dVelocity.Unit*walkForceM or ZERO
                                
                                -- mouse lock
                                local charRotation = newCharRotation * newCharCF
                                if (self.Camera:IsCamRelative()) then
                                    local lv = workspace.CurrentCamera.CFrame.LookVector
                                    local hlv = lv - charRotation.UpVector:Dot(lv)*charRotation.UpVector
                                    charRotation = lookAt(ZERO, hlv, charRotation.UpVector)
                                end
 
                                -- get state
                                self.StateTracker:OnStep(self.GravityUp, self:IsGrounded(), isInputMoving)
 
                                -- update values
                                self.VForce.Force = walkForce + gForce
                                self.Gyro.CFrame = charRotation
                            end
 
 
                            return GravityController

